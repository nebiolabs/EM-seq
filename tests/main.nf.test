nextflow_pipeline {

    name "Test EM-seq"
    script "main.nf"
    tag "pipeline"

    test("EM-seq workflow uBam") {
        when {
            params.ubam_dir = "$projectDir/tests/fixtures/ubam/"
            params.genome = 'test'
            params.email = 'foo@example.com'
            params.max_input_reads = 10000
            params.flowcell = "test_pipeline"
            params.enable_neb_agg = "false"

        }

        then {
            def bwameth = bam("${launchDir}/test_output/bwameth_align/emseq-test1.aln.bam").getStatistics()
            def bwameth2 = path("${launchDir}/test_output/bwameth_align/emseq-test2.aln.bam").exists()
            def fastqc = path("${launchDir}/test_output/stats/fastqc/emseq-test1.md_fastqc.html").exists()
            def fastqc2 = path("${launchDir}/test_output/stats/fastqc/emseq-test2.md_fastqc.html").exists()
            def fastp = path("${launchDir}/test_output/bwameth_align/emseq-test1.fastp.json").text.tokenize('\n')[1..33]
            def fastp2 = path("${launchDir}/test_output/bwameth_align/emseq-test2.fastp.json").exists()
            def markdup = bam("${launchDir}/test_output/markduped_bams/emseq-test1.md.bam").getStatistics()
            def markdup2 = path("${launchDir}/test_output/markduped_bams/emseq-test2.md.bam").exists()
            def insert_sizes = path("${launchDir}/test_output/stats/insert_size/emseq-test1.insertsize_metrics").text.tokenize('\n')[5..8]
            def insert_sizes2 = path("${launchDir}/test_output/stats/insert_size/emseq-test2.insertsize_metrics").exists()
            def idxstats = path("${launchDir}/test_output/stats/idxstats/emseq-test1.idxstat").text.tokenize('\n')
            def idxstats2 = path("${launchDir}/test_output/stats/idxstats/emseq-test2.idxstat").exists()
            def flagstats = path("${launchDir}/test_output/stats/flagstats/emseq-test1.flagstat").text.tokenize('\n')
            def flagstats2 = path("${launchDir}/test_output/stats/flagstats/emseq-test2.flagstat").exists()
            def gc_bias = path("${launchDir}/test_output/stats/gc_bias/emseq-test1.gc_metrics").text.tokenize('\n')[5..-1]
            def gc_bias2 = path("${launchDir}/test_output/stats/gc_bias/emseq-test2.gc_metrics").exists()
            def alignment_metrics = path("${launchDir}/test_output/stats/picard_alignment_metrics/emseq-test1.alignment_summary_metrics.txt").text.tokenize('\n')[5..8]
            def alignment_metrics2 = path("${launchDir}/test_output/stats/picard_alignment_metrics/emseq-test2.alignment_summary_metrics.txt").exists()
            def methyldackel_extract = path("${launchDir}/test_output/methylDackelExtracts/emseq-test1_CpG.methylKit.gz").md5
            def methyldackel_extract2 = path("${launchDir}/test_output/methylDackelExtracts/emseq-test2_CpG.methylKit.gz").exists()
            def mbias = path("${launchDir}/test_output/methylDackelExtracts/mbias/emseq-test1.combined_mbias.tsv").md5
            def mbias2 = path("${launchDir}/test_output/methylDackelExtracts/mbias/emseq-test2.combined_mbias.tsv").exists()
            def nonconverted = path("${launchDir}/test_output/bwameth_align/emseq-test1.nonconverted.tsv").text.tokenize('\n')
            def nonconverted2 = path("${launchDir}/test_output/bwameth_align/emseq-test2.nonconverted.tsv").exists()
            def intersection_summaries = path("${launchDir}/test_output/methylKit_intersections/all_summaries_combined.tsv").text.tokenize('\n')
            def methylkit_intersections = path("${launchDir}/test_output/methylKit_intersections/all_intersections_combined.tsv").text.tokenize('\n')
            def tasmanian = path("${launchDir}/test_output/stats/tasmanian/emseq-test1.csv").text.tokenize('\n')
            def tasmanian2 = path("${launchDir}/test_output/stats/tasmanian/emseq-test2.csv").exists()
            def multiqc = path("${launchDir}/test_output/EM-seq-Alignment-Summary-test_pipeline_multiqc_report.html").exists()

            assertAll(
                { assert workflow.success },
                { assert snapshot(workflow.trace,
                    ["bwameth", bwameth],
                    ["bwameth2", bwameth2],
                    ["fastqc", fastqc],
                    ["fastqc2", fastqc2],
                    ["fastp", fastp],
                    ["fastp2", fastp2],
                    ["markdup", markdup],
                    ["markdup2", markdup2],
                    ["insert_sizes", insert_sizes],
                    ["insert_sizes2", insert_sizes2],
                    ["idxstats", idxstats],
                    ["idxstats2", idxstats2],
                    ["flagstats", flagstats],
                    ["flagstats2", flagstats2],
                    ["gc_bias", gc_bias],
                    ["gc_bias2", gc_bias2],
                    ["alignment_metrics", alignment_metrics],
                    ["alignment_metrics2", alignment_metrics2],
                    ["methyldackel_extract", methyldackel_extract],
                    ["methyldackel_extract2", methyldackel_extract2],
                    ["mbias", mbias],
                    ["mbias2", mbias2],
                    ["nonconverted", nonconverted],
                    ["nonconverted2", nonconverted2],
                    ["intersection_summaries", intersection_summaries],
                    ["methylkit_intersections", methylkit_intersections],
                    ["tasmanian", tasmanian],
                    ["tasmanian2", tasmanian2],
                    ["multiqc", multiqc]
                ).match()
            }
        )
        }
    }
}
