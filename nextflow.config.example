conda.enabled = true
conda.useMicromamba = true
report.enabled = true
timeline.enabled = true
dag.enabled = true
dag.overwrite = true
report.overwrite = true
timeline.overwrite = true

// Dynamic resource fetching
def availableCpus = { java.lang.Runtime.getRuntime().availableProcessors() }()
def availableMemoryGB = {
    def osBean = java.lang.management.ManagementFactory.getOperatingSystemMXBean() as com.sun.management.OperatingSystemMXBean
    def totalMemoryGB = (osBean.getTotalPhysicalMemorySize() / (1024 * 1024 * 1024)) as float
    return Math.max(totalMemoryGB * 0.3, 1) // Reserve memory for OS
}()

params {
	email                       = 'undefined'
	flowcell                    = 'undefined'
	path_to_genome_fasta        = 'undefined'   // path to the genome FASTA file, e.g. /path/to/genome.fa
	input_glob                  = '*_R1.fastq*' // either the .bam or fastq read 1
	workflow                    = 'EM-seq'
	output_dir                  = "em-seq_output"
	tmp_dir                     = '/tmp'
	min_mapq                    = 20 // for methylation assessment.
	trim_bases                  = 5  // bases to trim from 5' end of reads for methylation assessment (correcting end repair)
	max_input_reads             = "all_reads" // default is not downsampling , set to a number to downsample e.g. 1000000 is 500k read pairs
	downsample_seed             = 42
	enable_neb_agg              = 'False'
	target_bed                  = null // BED file to intersect with methylKit output
    publish_intermediate_output = false
	publish_dir_mode            = 'symlink' // 'copy', 'link', 'symlink', 'rellink'
}

process {
    executor = 'local' // 'sge'. 'slurm', etc...

    withLabel: high_cpu {
	    cpus = { Math.min(task.requested_cpus ?: 16, Runtime.runtime.availableProcessors()) }
	    memory = { "${Math.min(64, Math.max(8, (availableMemoryGB as Integer)))} GB" }
    }

    withLabel: medium_cpu {
        cpus = { Math.min(task.requested_cpus ?: 4, Runtime.runtime.availableProcessors()) }
        memory = { "${Math.min(8, Math.max(4, (availableMemoryGB as Integer)))} GB" }
    }

    withLabel: low_cpu {
        cpus = 1
        memory = '4 GB'
    }
}
