conda.enabled = true
conda.useMicromamba = true
report.enabled = true
timeline.enabled = true
dag.enabled = true
dag.overwrite = true

// Dynamic resource fetching
def availableCpus = { java.lang.Runtime.getRuntime().availableProcessors() }()
def availableMemoryGB = {
    def osBean = java.lang.management.ManagementFactory.getOperatingSystemMXBean() as com.sun.management.OperatingSystemMXBean
    def totalMemoryGB = (osBean.getTotalPhysicalMemorySize() / (1024 * 1024 * 1024)) as float
    return Math.max(totalMemoryGB * 0.3, 1) // Reserve memory for OS
}()

process {
    executor = 'local' // 'sge'. 'slurm', etc... 
    
    withLabel: high_cpu {
	    cpus = { Math.min(task.requested_cpus ?: 16, Runtime.runtime.availableProcessors()) }
	    memory = { "${Math.min(64, Math.max(8, (availableMemoryGB as Integer)))} GB" }
    }

    withLabel: medium_cpu {
        cpus = { Math.min(task.requested_cpus ?: 4, Runtime.runtime.availableProcessors()) }
        memory = { "${Math.min(8, Math.max(4, (availableMemoryGB as Integer)))} GB" }
    }

    withLabel: low_cpu {
        cpus = 1
        memory = '4 GB' 
    }
}
