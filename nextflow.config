conda.enabled = true
report.enabled = true
timeline.enabled = true
dag.enabled = true
dag.overwrite = true

// Dynamic resource fetching
def availableCpus = { java.lang.Runtime.getRuntime().availableProcessors() }()
def availableMemoryGB = {
    def osBean = java.lang.management.ManagementFactory.getOperatingSystemMXBean() as com.sun.management.OperatingSystemMXBean
    def totalMemoryGB = (osBean.getTotalPhysicalMemorySize() / (1024 * 1024 * 1024)) as float
    return Math.max(totalMemoryGB * 0.3, 1) // Reserve 4 GB for OS
}()

process {
    executor = 'sge' 

    withLabel: high_cpu {
	cpus = 16
        //memory = { "${Math.min(64, (availableMemoryGB as Integer))} GB" }
	memory = { "${Math.max(64, Math.min(256, (availableMemoryGB as Integer)))} GB" }

    }

    withLabel: medium_cpu {
        cpus = 4
        memory = { "${Math.min(15, (availableMemoryGB as Integer))} GB" } 	
    }

    withLabel: low_cpu {
        cpus = 1
        memory = '4 GB' 
    }

    //clusterOptions= { "-V -S /bin/bash -R y -l m_mem_free=${task.memory ? task.memory.toGiga() / task.cpus : task.cpus*7}G" }
}

params {
    revision = "20250317200805" 
    path_to_ngs_agg = "/mnt/bioinfo/prg/ngs-aggregate_results/releases/"
}

